local paddles = {}

local ball = {}

local score = {0,0}

local function resetBall(move_x, move_y)
	ball.pos.x = 400;
	ball.pos.y = 300;
	ball.move.x = move_x;
	ball.move.y = move_y;
end

local function updatePos(entity, delta)
	entity.pos.x = entity.pos.x + entity.move.x * delta * 4
	entity.pos.y = entity.pos.y + entity.move.y * delta * 4

end

local function displayScore(player)
	if html5 and player then
		html5.run("displayScore("..player..")")
	end

	local scoreText = score[1] .. ":" .. score[2]
	msg.post("main:/gui#main", "update_score", {text = scoreText})


end

local function vibrate(player)
	if html5 then
		html5.run("vibrate("..player..")")
	end
end

local function js_listener(self, message_id, message)
	print('js_listener -> ',message_id)
	pprint(message)

	if message_id == "airconsole.onConnect" then

    elseif message_id == "airconsole.onDisconnect" then

    elseif message_id == "airconsole.onMessage" then
		local player = message.player
		local data = message.data

		paddles[player + 1].move.y = data.move

    elseif message_id == "update_state" then
		local state = message.state

		if state == 0 then
			resetBall(50, 0)
			msg.post("main:/gui#main", "update_status", {text = message.text})

		elseif state == 1 then
			resetBall(0, 0)
			msg.post("main:/gui#main", "update_status", {text = message.text})

		elseif state == 2 then
			resetBall(0, 0)
			msg.post("main:/gui#main", "update_status", {text = message.text})

		elseif state == 3 then
			msg.post("main:/gui#main", "update_status", {text = message.text})

			timer.delay(1, false, function()
				msg.post("main:/gui#main", "update_status", {text = ""})
			end)
		end

    end

end

function init(self)
	if html5 then
		if jstodef then
			jstodef.add_listener(js_listener)
		end

		html5.run("setupConsole()")

	end

	self.ball = go.get_id("/ball")
	self.paddle1 = go.get_id("/paddle1")
	self.paddle2 = go.get_id("/paddle2")

	ball.pos = vmath.vector3(400,300,0)
	ball.move = vmath.vector3(0,0,0)

	local paddle1 = {}
	paddle1.pos = vmath.vector3(50,300,0)
	paddle1.move = vmath.vector3(0,0,0)

	local paddle2 = {}
	paddle2.pos = vmath.vector3(750,300,0)
	paddle2.move = vmath.vector3(0,0,0)

	table.insert(paddles, paddle1)
	table.insert(paddles, paddle2)

	displayScore()
end

function final(self)

end

function update(self, dt)

	updatePos(paddles[1], dt)
	updatePos(paddles[2], dt)
	updatePos(ball, dt)

	paddles[1].pos.y = math.min(math.max(50, paddles[1].pos.y), 550)
	paddles[2].pos.y = math.min(math.max(50, paddles[2].pos.y), 550)

	-- paddle limit
	-- Wall bounce
	if (ball.pos.y <= 0) then
		ball.pos.y = 0
		ball.move.y = ball.move.y * -1
		updatePos(ball, 0)
	end

	if (ball.pos.y >= 600) then
		ball.pos.y = 600
		ball.move.y = ball.move.y * -1
		updatePos(ball, 0)
	end

	-- Paddle bounce
	if (ball.pos.x >= paddles[1].pos.x - 10 and
		ball.pos.x <= paddles[1].pos.x + 10 and
		ball.pos.y >= paddles[1].pos.y - 50 and
		ball.pos.y <= paddles[1].pos.y + 50) then
			ball.move.x = ball.move.x * -1
			ball.move.y = ball.move.y + (ball.pos.y - paddles[1].pos.y)*2
			ball.pos.x = paddles[1].pos.x + 10
	end
	if (ball.pos.x >= paddles[2].pos.x - 10 and
		ball.pos.x <= paddles[2].pos.x + 10 and
		ball.pos.y >= paddles[2].pos.y - 50 and
		ball.pos.y <= paddles[2].pos.y + 50) then
			ball.move.x = ball.move.x * -1
			ball.move.y = ball.move.y + (ball.pos.y - paddles[2].pos.y)*2
			ball.pos.x = paddles[2].pos.x - 10
	end

	-- Score
	if (ball.pos.x >= 800) then
		score[1] = score[1] + 1
		displayScore(0)
		resetBall(-ball.move.x, ball.move.y/2)
		vibrate(1)
	end
	if (ball.pos.x <= 0) then
		score[2] = score[2] + 1
		displayScore(1)
		resetBall(-ball.move.x, ball.move.y/2)
		vibrate(0)
	end

	go.set_position(vmath.vector3(ball.pos.x, ball.pos.y, 0), self.ball)
	go.set_position(vmath.vector3(paddles[1].pos.x, paddles[1].pos.y, 0), self.paddle1)
	go.set_position(vmath.vector3(paddles[2].pos.x, paddles[2].pos.y, 0), self.paddle2)
end

function on_message(self, message_id, message, sender)

end

function on_input(self, action_id, action)

end
